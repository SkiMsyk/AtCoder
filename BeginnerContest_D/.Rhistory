')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
Sys.getenv()["PATH"]
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
stan_demo()
stan_demo(1)
library(sessioninfo)
session_info()
system('g++ -v')
#----
# setting makevars
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
# Macの場合でg++のバージョンが4.9以上だったら下記も必要, 自分は4.2.1だったのでコメントアウトした
# cat("\nCXXFLAGS+=-flto -ffat-lto-objects  -Wno-unused-local-typedefs",
#     file = M, sep = "\n", append = TRUE)
# 下記はc++がインストールされていない場合は実行する、自分は不要だったのでコメントアウトした
# cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
#     file = M, sep = "\n", append = TRUE)
# g++ version6以上で、Stanに関係ないwarningを無効にしたい場合は実行する、とりあえず実行してみた
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
library(rstan)
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
print(fit)
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
library(Rcpp)
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
system('g++ -v')
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
#----
# setting makevars
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
MAKEVARS <- file.path(dotR, "Makevars")
if (!file.exists(MAKEVARS)) file.create(MAKEVARS)
cat(
"\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function  -Wno-macro-redefined -Wno-unknown-pragmas",
"\nCC=clang",
"CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = MAKEVARS,
sep = "\n",
append = TRUE
)
# print the contents to the console
cat(readLines(MAKEVARS), sep = "\n")
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
cat(readLines(M), sep = “\n”)
#----
# setting makevars
dotR <- file.path(Sys.getenv("HOME"), ".R")
MAKEVARS <- file.path(dotR, "Makevars")
# print the contents to the console
cat(readLines(MAKEVARS), sep = "\n")
install.packages("installr")
devtools::install_github("AndreaCirilloAC/updateR")
library(devtools)
devtools::install_github("AndreaCirilloAC/updateR")
library(sessioninfo)
session_info()
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add(1, 2, 3)
session_info()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
MAKEVARS <- file.path(dotR, "Makevars")
if (!file.exists(MAKEVARS)) file.create(MAKEVARS)
cat(
"\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function  -Wno-macro-redefined -Wno-unknown-pragmas",
"\nCC=clang",
"CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = MAKEVARS,
sep = "\n",
append = TRUE
)
# print the contents to the console
cat(readLines(MAKEVARS), sep = "\n")
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
#----
# downgrade StanHeaders
install.packages("https://cran.r-project.org/src/contrib/Archive/StanHeaders/StanHeaders_2.11.0.tar.gz",
repos = NULL)
#----
# do rstan fit
library(rstan)
rstan_options(auto_write = TRUE)
library(StanHeaders)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
options(mc.cores = parallel::detectCores())
library(StanHeaders)
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
#----
# do rstan fit
library(rstan)
#----
# do rstan fit
library(rstan)
#----
# downgrade StanHeaders
install.packages("https://cran.r-project.org/src/contrib/Archive/StanHeaders/StanHeaders_2.17.2.tar.gz",
repos = NULL)
#----
# do rstan fit
library(rstan)
library(StanHeaders)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Desktop/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
print(fit)
plot(fit)
pairs(fit, pars = c("mu", "tau", "lp__"))
#----
# c++ test
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) == 10 # 10になるはずです
#----
# test data
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
#----
# do rstan fit
library(rstan)
library(StanHeaders)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = '~/Dropbox/11_mystudy/Stan&R/Stan_Settings/stan_test.stan', data = schools_dat, iter = 1000, chains = 4)
print(fit)
plot(fit)
pairs(fit, pars = c("mu", "tau", "lp__"))
install.packages("TSrepr")
library(TSrepr)
library(TSrepr)
library(tidyverse)
data("elec_load")
data("elec_load")
elec_load
data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(aes(Time, Value)) + geom_line()
data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(dfm aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(df, aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(df, mapping = aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,]) %>%
ggplot(df, mapping = aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,])
ggplot(df, aes(x=Time, y=Value)) + geom_line()
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,])
df
elec_load[1,]
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,] %>% as.numeric())
df
df = data.frame(Time = 1:nrow(elec_load), Value = elec_load[1,] %>% as.numeric())
elec_load[1,] %>% as.numeric()
1:nrow(elec_load)
x = elec_load[1,] %>% as.numeric()
df = data.frame(Time = x, Value = elec_load[1,] %>% as.numeric())
ggplot(df, aes(x=Time, y=Value)) + geom_line()
x = elec_load[1,] %>% as.numeric()
df = data.frame(Time = x, Value = x)
ggplot(df, aes(x=Time, y=Value)) + geom_line()
x
x = elec_load[1,] %>% as.numeric()
df = data.frame(Time = 1:length(x), Value = x)
ggplot(df, aes(x=Time, y=Value)) + geom_line()
fit_dwt <- repr_dwt(x, level=3) # first 84 DFT coefficients are extracted and then inverted
fit_dwt
x = elec_load[1,] %>% as.numeric()
df = data.frame(Time = 1:length(x), Value = x)
g_origin <- ggplot(df, aes(x=Time, y=Value)) + geom_line()
x = elec_load[1,] %>% as.numeric()
df = data.frame(Time = 1:length(x), Value = x)
g_origin <- ggplot(df, aes(x=Time, y=Value)) + geom_line()
plot(g_origin)
length(x)
length(data_dwt)
length(fit_dwt)
fit_dwt <- repr_dwt(x, level=3) # first 84 DFT coefficients are extracted and then inverted
fit_dwt
summary(fit_dwt)
adf <- data.frame(Time = 1:length(fit_dwt), Value=fit_dwt)
ggplot(adf, aes(Time, Value)) + geom_line()
fit_dwt <- repr_dwt(x, level=4) # first 84 DFT coefficients are extracted and then inverted
fit_dwt
fit_dwt <- repr_dwt(x, level=8) # first 84 DFT coefficients are extracted and then inverted
fit_dwt
fit_dwt <- repr_dwt(x, level=3) # first 84 DFT coefficients are extracted and then inverted
fit_dwt
length(x)
x/3
length(x)/3
fit_dwt <- repr_dwt(x, level=3) # first 84 DFT coefficients are extracted and then inverted
fit_dft <- repr_dft(x, coef=84)
fit_dct <- repr_dct(x, coef=84)
fit_paa <- repr_paa(x, q=8, func=mean)
adf <- data.frame(Time = rep(1:length(fit_dwt)),
Value = c(fit_dwt, fit_dft, fit_dct, fit_paa),
Method = factor(rep(c("DWT", "DFT", "DCT", "PAA"),
each=length(x))
)
)
ggplot(adf, aes(x=Time, y=Value, group=Method, color=Method)) + geom_line()
head(adf)
fit_paa
fit_dct
fit_dft
fit_dwt
fit_dwt <- repr_dwt(x, level=3) # first 84 DFT coefficients are extracted and then inverted
fit_dft <- repr_dft(x, coef=84)
fit_dct <- repr_dct(x, coef=84)
fit_paa <- repr_paa(x, q=8, func=mean)
adf <- data.frame(Time = rep(1:length(fit_dwt)),
Value = c(fit_dwt, fit_dft, fit_dct, fit_paa),
Method = factor(rep(c("DWT", "DFT", "DCT", "PAA"),
each=length(x))
)
)
adf <- data.frame(Time = rep(1:length(fit_dwt)),
Value = c(fit_dwt, fit_dft, fit_dct, fit_paa),
Method = factor(rep(c("DWT", "DFT", "DCT", "PAA"),
each=length(x))
)
)
ggplot(adf, aes(x=Time, y=Value, group=Method, color=Method)) + geom_line()
View(adf)
1:length(fit_dwt)
adf <- data.frame(Time = rep(1:length(fit_dwt), 4),
Value = c(fit_dwt, fit_dft, fit_dct, fit_paa),
Method = factor(rep(c("DWT", "DFT", "DCT", "PAA"),
each=length(x))
)
)
ggplot(adf, aes(x=Time, y=Value, group=Method, color=Method)) + geom_line()
rep(1:length(fit_dwt), 4)
c(fit_dwt, fit_dft, fit_dct, fit_paa)
adf <- data.frame(Time = rep(1:length(fit_dwt), 4),
Value = c(fit_dwt, fit_dft, fit_dct, fit_paa),
Method = factor(rep(c("DWT", "DFT", "DCT", "PAA"),
each=length(fit_dwt))
)
)
ggplot(adf, aes(x=Time, y=Value, group=Method, color=Method)) + geom_line()
source('~/Dropbox/11_mystudy/FromExcelToRForBusiness/Book1.R', echo=TRUE)
curve(
dgamma(
x,
shape = 383,
rate = 1000
),
lwd = 2,
xlim = c(.2, .6),
lab = c(8,5,3),
xlab = 'freq', ylab = 'density',
main = 'Gamma'
)
lines(
x = c(.383, .383),
y = c(0, 20.38),
lty = 1, lwd = 1
)
lines(
x = c(.2, .6),
y = c(0, 0),
lty = 1,
lwd = 2
)
getwd()
setwd("Dropbox/AtCorder/BeginnerContest_A/")
list.files()
library(stringr)
as.character(3:85)
str_dup("1", 2)
i <- "80"
i
str_c(str_dup("0", 3 - str_length(i)), i)
file_name <- str_c(str_dup("0", 3 - str_length(i)), i, ".py")
file_name
write.table(x="", file=)
getwd()
write(x="", file=)
write(x="", file=file_name)
for(i in as.character(3:85)){
file_name <- str_c(str_dup("0", 3 - str_length(i)), i, ".py")
if(!file_name %in% list.files()){
write(x="", file=file_name)
}
}
getwd()
for(d in c("B", "C", "D")){
folder_name <- str_c("/Users/sakaimasayuki/Dropbox/AtCorder/BeginnerContest_", d)
setwd(folder_name)
for(i in as.character(3:85)){
file_name <- str_c(str_dup("0", 3 - str_length(i)), i, ".py")
if(!file_name %in% list.files()){
write(x="", file=file_name)
}
}
}
for(d in c("B", "C", "D")){
folder_name <- str_c("/Users/sakaimasayuki/Dropbox/AtCorder/BeginnerContest_", d)
setwd(folder_name)
for(i in as.character(1:85)){
file_name <- str_c(str_dup("0", 3 - str_length(i)), i, ".py")
if(!file_name %in% list.files()){
write(x="", file=file_name)
}
}
}
